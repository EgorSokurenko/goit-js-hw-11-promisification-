{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","canProcess","obj","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AA6FE,aA7FF,QAAA,oBAEA,MAAMA,EAAQC,GACH,IAAIC,QAAQ,CAACC,EAASC,KAC1BC,WAAW,KACPF,EAAQF,IACTA,KAIFK,EAASC,GAAQC,QAAQC,6BAA6BF,OAG5DP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAId,QAASC,IAIdA,EAHmBY,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAMjEC,EAAUC,GAAgBZ,QAAQa,MAAMD,GAG9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAOrC,MAAMG,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC/B,MAAAA,EAAQsB,EAA0B,IAAK,KACtC,OAAA,IAAIpB,QAAQ,CAACC,EAASC,KACzBC,WAAW,KAGH2B,GAFeP,KAAKE,SAAW,GAEnB,CACNM,MAAAA,EAAM,CACR1B,KAAKP,EACLkC,GAAGL,EAAYK,IAErB/B,EAAQ8B,QAER7B,EAAOyB,EAAYK,KAEpBlC,MAILmC,EAAa,EAAE5B,KAAAA,EAAK2B,GAAAA,MACxB1B,QAAQC,0BAA0ByB,kBAAmB3B,QAGjD6B,EAAWF,IACf1B,QAAQ6B,4CAA4CH,+BAOtDN,EAAgB,CAAEM,GAAI,GAAII,OAAQ,MAC/B5B,KAAKyB,GACLI,MAAMH,GAETR,EAAgB,CAAEM,GAAI,GAAII,OAAQ,MAC/B5B,KAAKyB,GACLI,MAAMH,GAETR,EAAgB,CAAEM,GAAI,GAAII,OAAQ,KAC/B5B,KAAKyB,GACLI,MAAMH,GAETR,EAAgB,CAAEM,GAAI,GAAII,OAAQ,MAC/B5B,KAAKyB,GACLI,MAAMH","file":"src.2f5af388.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n//    TASK 1\nconst delay = ms => {\n    return new Promise((resolve, reject) => {\n       setTimeout(()=>{\n           resolve(ms)\n       }, ms )\n      });\n  };\n  \n  const logger = time => console.log(`TASK 1 Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n\n  //   TASK 2\n\n  const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve)=>{\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n          );\n          resolve(updatedUsers)\n    })\n  };\n  \n  const logger2 = updatedUsers => console.table(updatedUsers);\n  \n\n  toggleUserState(users, 'Mango').then(logger2);\n  toggleUserState(users, 'Lux').then(logger2);\n\n// TASK 3\n\n\n\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject)=>{\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n                const obj = {\n                    time:delay,\n                    id:transaction.id\n                }\n              resolve(obj);\n            } else {\n              reject(transaction.id);\n            }\n          }, delay);\n    })\n  };\n  \n  const logSuccess = ({time,id}) => {\n    console.log(`TASK 2 Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`TASK 2 Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  /*\n \n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"]}